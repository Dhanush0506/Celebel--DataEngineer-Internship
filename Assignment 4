1. Weather Observation Station 8 - City Name Lengths

Problem: Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths. If there are multiple cities with the same length, choose the lexicographically first one.

Table Structure:
STATION (ID, CITY, STATE, LAT_N, LONG_W)

Solution:
-- Shortest city name (SELECT CITY, LENGTH(CITY) as length FROM STATION ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1) UNION ALL -- Longest city name (SELECT CITY, LENGTH(CITY) as length FROM STATION ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1);
Sample Input/Output:
Input: STATION table: ID | CITY | STATE | LAT_N | LONG_W 1 | New York | NY | 40.71 | 74.01 2 | LA | CA | 34.05 | 118.24 3 | San Francisco | CA | 37.77 | 122.42 Output: LA 2 San Francisco 13

2. Population Density Difference

Problem: Query the difference between the maximum and minimum populations in CITY.

Table Structure:
CITY (ID, NAME, COUNTRYCODE, DISTRICT, POPULATION)

Solution:
SELECT MAX(POPULATION) - MIN(POPULATION) AS population_difference FROM CITY;

Sample Input/Output:
Input: CITY table: ID | NAME | POPULATION 1 | Mumbai | 12691836 2 | Delhi | 16753235 3 | Bangalore | 8443675 4 | Chennai | 4681087 Output: population_difference 12072148

3. Weather Observation Station 19 - Euclidean Distance

Problem: Calculate the Euclidean Distance between two points P1(min_lat, min_long) and P2(max_lat, max_long) and format to 4 decimal places.
Solution:
SELECT ROUND( SQRT( POWER(MAX(LAT_N) - MIN(LAT_N), 2) + POWER(MAX(LONG_W) - MIN(LONG_W), 2) ), 4 ) AS euclidean_distance FROM STATION;


4. Weather Observation Station 20 - Median Calculation

Problem: Query the median of Northern Latitudes (LAT_N) from STATION and round to 4 decimal places.
Solution:
-- Method 1: Using ROW_NUMBER (More efficient) SELECT ROUND(AVG(LAT_N), 4) AS median_lat FROM ( SELECT LAT_N, ROW_NUMBER() OVER (ORDER BY LAT_N) as row_num, COUNT(*) OVER() as total_count FROM STATION ) ranked WHERE row_num IN (FLOOR((total_count + 1) / 2), CEIL((total_count + 1) / 2)); -- Method 2: Traditional approach SELECT ROUND(LAT_N, 4) AS median_lat FROM STATION S1 WHERE (SELECT COUNT(LAT_N) FROM STATION S2 WHERE S2.LAT_N <= S1.LAT_N) = (SELECT COUNT(LAT_N) FROM STATION S3 WHERE S3.LAT_N >= S1.LAT_N);

5.and 6. African Cities

Problem: Query the names of all cities where the CONTINENT is 'Africa'.

Solution:
SELECT CITY.NAME FROM CITY JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE WHERE COUNTRY.CONTINENT = 'Africa';

7. The Report - Grade Analysis

Problem: Generate a report with Name, Grade, and Mark. Hide names for grades < 8, show "NULL" instead.

Solution:
SELECT CASE WHEN G.GRADE < 8 THEN 'NULL' ELSE S.NAME END AS NAME, G.GRADE, S.MARKS FROM STUDENTS S JOIN GRADES G ON S.MARKS BETWEEN G.MIN_MARK AND G.MAX_MARK ORDER BY G.GRADE DESC, CASE WHEN G.GRADE >= 8 THEN S.NAME END ASC, CASE WHEN G.GRADE < 8 THEN S.MARKS END ASC;
Grade Distribution Analysis

8. Top Competitors
Problem: Find hackers who achieved full scores for more than one challenge.

Solution:
SELECT H.HACKER_ID, H.NAME FROM HACKERS H JOIN SUBMISSIONS S ON H.HACKER_ID = S.HACKER_ID JOIN CHALLENGES C ON S.CHALLENGE_ID = C.CHALLENGE_ID JOIN DIFFICULTY D ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL WHERE S.SCORE = D.SCORE GROUP BY H.HACKER_ID, H.NAME HAVING COUNT(S.CHALLENGE_ID) > 1 ORDER BY COUNT(S.CHALLENGE_ID) DESC, H.HACKER_ID ASC;

9. Ollivander's Inventory

Problem: Find the minimum cost wands for each power and age combination (non-evil wands only).

Solution:
SELECT W.ID, WP.AGE, W.COINS_NEEDED, W.POWER FROM WANDS W JOIN WANDS_PROPERTY WP ON W.CODE = WP.CODE WHERE WP.IS_EVIL = 0 AND W.COINS_NEEDED = ( SELECT MIN(W2.COINS_NEEDED) FROM WANDS W2 JOIN WANDS_PROPERTY WP2 ON W2.CODE = WP2.CODE WHERE WP2.IS_EVIL = 0 AND W2.POWER = W.POWER AND WP2.AGE = WP.AGE ) ORDER BY W.POWER DESC, WP.AGE DESC;

10. Contest Leaderboard

Problem: Calculate total score for each hacker (sum of maximum scores per challenge), exclude zero scores.

Solution:
SELECT H.HACKER_ID, H.NAME, SUM(max_scores.max_score) AS total_score FROM HACKERS H JOIN ( SELECT HACKER_ID, CHALLENGE_ID, MAX(SCORE) AS max_score FROM SUBMISSIONS GROUP BY HACKER_ID, CHALLENGE_ID ) max_scores ON H.HACKER_ID = max_scores.HACKER_ID GROUP BY H.HACKER_ID, H.NAME HAVING total_score > 0 ORDER BY total_score DESC, H.HACKER_ID ASC;

